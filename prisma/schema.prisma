datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "../src/generated/zod"
}

enum ObjectType {
  All
  Address
  Location
  Spot
  Theatre
  Role
  Permission
  User
  Sales
  Screening
  ScreenEvent
  PricingPolicy
  Ticket
}

enum ActionType {
  All
  Create
  Read
  Update
  Delete
}

model Role {
  /// @zod.uuid().optional()
  id          String       @id @default(cuid())
  /// @zod.min(5, {message: "Role name must have at least 5 characters"})
  name        String       @unique
  /// @zod.min(10, {message: "Role description must have at least 10 characters"})
  description String
  users       User[]
  permissions Permission[]

  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt
}

model Permission {
  /// @zod.uuid().optional()
  id         String     @id @default(cuid())
  objectType ObjectType
  /// @zod.array().min(1, {message: "Must have at least one action type"}).or(z.string())
  action     ActionType
  allowed    Boolean
  // @zod.optional()
  Role       Role       @relation(fields: [roleId], references: [id])
  roleId     String

  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt

  @@unique([objectType, action])
}

model User {
  /// @zod.uuid().optional()
  id       String     @id @default(cuid())
  email    String     @unique
  username String?
  role     Role?      @relation(fields: [roleId], references: [id])
  roleId   String?
  password Password[]

  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt
  Ticket    Ticket[]
}

model Password {
  /// @zod.uuid().optional()
  id       String  @id @default(cuid())
  password String
  User     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  active   Boolean

  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt
}

model Address {
  id       String    @id @default(cuid())
  street   String
  city     String
  zip      String
  country  String
  Location Location?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id        String    @id @default(cuid())
  name      String
  address   Address   @relation(fields: [addressId], references: [id])
  addressId String    @unique
  theatres  Theatre[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seat {
  row       Int
  column    Int
  theatre   Theatre @relation(fields: [theatreId], references: [id])
  theatreId String

  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt

  reservationId String?
  Ticket        Ticket? @relation(fields: [ticketId], references: [id])
  ticketId      String?
  @@id([row, column, theatreId])
}

model Theatre {
  /// @zod.uuid().optional()
  id         String   @id @default(cuid())
  /// @zod.min(5, {message: "Name must have at least 5 characters"})
  name       String
  location   Location @relation(fields: [locationId], references: [id])
  /// @zod.min(1, {message: "Must have a location set"})
  locationId String
  /// @zod.optional()
  capacity   Int
  /// @zod.min(1, {message: "Must have at least one seat"})
  seats      Seat[]
  rows       Int
  columns    Int

  /// @zod.optional()
  createdAt   DateTime      @default(now())
  /// @zod.optional()
  updatedAt   DateTime      @updatedAt
  ScreenEvent ScreenEvent[]
}

model Screening {
  /// @zod.nonempty().min(9)
  imdbId      String        @id
  /// @zod.nonempty().min(1)
  title       String
  /// @zod.nonempty().min(20)
  description String
  /// @zod.nonempty().min(10)
  poster      String
  /// @zod.nonempty().min(1)
  rating      String
  duration    Int
  release     DateTime
  /// @zod.optional()
  createdAt   DateTime      @default(now())
  /// @zod.optional()
  updatedAt   DateTime      @updatedAt
  ScreenEvent ScreenEvent[]
}

enum DayOfWeek {
  Sunday // 0 value
  Monday // 1 value
  Tuesday // 2 value
  Wednesday // 3 value
  Thursday // 4 value
  Friday // 5 value
  Saturday // 6 value
}

model ScreenEvent {
  /// @zod.optional()
  id            String          @id @default(cuid())
  // recurrence options
  daysOfWeek    DayOfWeek[]
  startTime     String?         @default("00:00:00")
  endTime       String?         @default("23:59:59")
  startRecur    DateTime        @default(now())
  endRecur      DateTime
  /// @zod.min(1, {message: "Must have at least one theatre"})
  theatres      Theatre[]
  screening     Screening       @relation(fields: [screeningId], references: [imdbId])
  /// @zod.min(9)
  screeningId   String
  pricingPolicy PricingPolicy[]
  tickets       Ticket[]
  /// @zod.optional()
  createdAt     DateTime        @default(now())
  /// @zod.optional()
  updatedAt     DateTime        @updatedAt
}

enum AgeCategory {
  Child
  Adult
  Senior
}

enum TicketType {
  TwoD
  ThreeD
  IMAX
  FourD
}

model PricingPolicy {
  /// @zod.optional()
  id          String        @id @default(cuid())
  ageCategory AgeCategory
  ticketType  TicketType    @default(TwoD)
  price       Float
  /// @zod.optional()
  createdAt   DateTime      @default(now())
  /// @zod.optional()
  updatedAt   DateTime      @updatedAt
  ScreenEvent ScreenEvent[]

  @@unique([ageCategory, ticketType])
}

model Ticket {
  /// @zod.uuid().optional()
  id            String      @id @default(cuid())
  /// @zod.min(1, {message: "Must have at least one seat"})
  seats         Seat[]
  /// @zod.min(1, {message: "Must have at least one user"})
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @unique
  ScreenEvent   ScreenEvent @relation(fields: [screenEventId], references: [id])
  screenEventId String
  timeSlot      String

  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt
}

enum RepositoryStatus {
  Active
  Inactive
}

model Repository {
  id        String           @id @default(cuid())
  version   Float
  status    RepositoryStatus
  /// @zod.optional()
  createdAt DateTime         @default(now())
  /// @zod.optional()
  updatedAt DateTime         @updatedAt
}

enum SettingsCategory {
  General
  Security
  Locales
}

model ApplicationSettings {
  id        String           @id @default(cuid())
  category  SettingsCategory
  key       String
  value     String
  /// @zod.optional()
  createdAt DateTime         @default(now())
  /// @zod.optional()
  updatedAt DateTime         @updatedAt
}
