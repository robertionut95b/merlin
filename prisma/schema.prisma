datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output = "../src/generated/zod"
}

enum ObjectType {
  All
  Address
  Location
  Spot
  Theatre
  Role
  Permission
  User
  Sales
}

enum ActionType {
  All
  Create
  Read
  Update
  Delete
}

model Role {
  /// @zod.uuid().optional()
  id          String       @id @default(cuid())
  /// @zod.min(5, {message: "Role name must have at least 5 characters"})
  name        String  @unique
  /// @zod.min(10, {message: "Role description must have at least 10 characters"})
  description String
  users       User[]
  permissions Permission[]

  /// @zod.optional() 
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt
}

model Permission {
  /// @zod.uuid().optional()
  id         String  @id @default(cuid())
  objectType ObjectType
  /// @zod.array().min(1, {message: "Must have at least one action type"}).or(z.string())
  action     ActionType
  allowed    Boolean
  // @zod.optional()
  Role       Role   @relation(fields: [roleId], references: [id])
  roleId    String

  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt

  @@unique([objectType, action])
}

model User {
  /// @zod.uuid().optional()
  id       String @id @default(cuid())
  email    String @unique
  username String
  role     Role   @relation(fields: [roleId], references: [id])
  roleId   String

  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt  DateTime @updatedAt
}

model Address {
  id       String    @id @default(cuid())
  street   String
  city     String
  zip      String
  country  String
  Location Location?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id        String  @id @default(cuid())
  name      String
  address   Address @relation(fields: [addressId], references: [id])
  addressId String  @unique
  theatres Theatre[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seat {
  row   Int
  column Int
  theatre Theatre @relation(fields: [theatreId], references: [id])
  theatreId String

  /// @zod.optional() 
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt

  @@id([row, column, theatreId])
}

model Theatre {
  /// @zod.uuid().optional()
  id String @id @default(cuid())
  /// @zod.min(5, {message: "Name must have at least 5 characters"})
  name String
  location Location @relation(fields: [locationId], references: [id])
  /// @zod.min(1, {message: "Must have a location set"})
  locationId String
  /// @zod.optional()
  capacity Int
  /// @zod.min(1, {message: "Must have at least one seat"})
  seats Seat[]
  rows Int
  columns Int

  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt
}
